import Data.List

solveRPN :: String -> Float
solveRPN = head.foldl foldingFunction [] . words
    where foldingFunction(x:y:ys) "*" = (x * y):ys
    where foldingFunction(x:y:ys) "+" = (x + y):ys
    where foldingFunction(x:y:ys) "-" = (x - y):ys
    where foldingFunction(x:y:ys) "/" = (x / y):ys
    where foldingFunction(x:y:ys) "^" = (x ** y):ys
    where foldingFunction(x:xs) "ln" = log x:xs
    where foldingFunction xs "sum" = [sum xs]
    where foldingFunction xs numberString = read numberString:xs
